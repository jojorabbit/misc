Bash scripting
Lynda.com Up and Running with Bash Scripting

# Bourne again shell
# default shell from Mac OS and Linux

; - command seporator
# - comment

echo $BASH_VERSION - check bash version

# expansions
touch {apple, banana, cherry}	# create several files
touch file_{1..1000}			# create 1000 files
touch file_{01..1000}			# create 1000 files with zero paddings
echo {01..10..2}				# 1 3 5 7 9
echo {01..10..3}				# 1 4 7 10
echo {A..Z}
echo {a..Z}
echo {A..z}
echo {w..d..2}					# might not have this feature available depends on platform


ls -1 | wc -l 					# count all files


# redirections

ls | more - pipe as example

chmod 000 *_015* 				# block permissions for files with _015 in their name

ls > /dev/null 					# ignore output

# grep

grep --color=auto						# enable highlighting for single command
export GREP_OPTIONS='--color=auto' 		# enable highlighting permanently  

grep -i break-in auth.log | awk {'print $12'} 						# -i case insensetive and awk {'print $12'} will print 12th column

# check man
man awk
man seq

ping -c 1 example.com | grep 'bytes from' | cut -d = -f 4			# cut -d = -f 4  will display 4th field after = 


#!/bin/bash 		# start script 
bash my.sh 			# run bash script
chmod +x my.sh 		# make executable

# Variables

# Must start with letter and can be alphanumeric

a=Hello
b="good Morning" 
c=16

echo $a
echo $b
echo $c

declare -i d=123 			#d is an integer	  
declare -r e=456 			#e is read-only
declare -l f="LOLCats"		#f is lolcats	  
declare -l g="LOLCats"		#g is LOLCATS	 

#build in variables

echo $HOME 					# users home directory
echo $PWD 					# current directory
echo $MACHTYPE 				# machine type
echo $HOSTNAME				# system name
echo $BASH_VERSION			# version of bash
echo $SECONDS				# Number of seconds Bash session has run
echo $0 					# name of the script


# Command substitution

d=$(pwd)
edho $d 	# run pwd command

# Numbers

d=2
e=$((d+2))
((e++))
((e+=5))
# without (()) - it would concatinate strings
4+5  	# 45

f=$((1/3)) 				# output integer
g=$(echo 1/3 | bc -l) 	# will output decimals

# Comparison

# compare strings
[[ expression ]]		# spaces are important!!! 

[[ "cat" == "cat" ]]
echo $?					# return 0 for success


[[ 20 > 100 ]] 			# treated as strings

# for strings and integers
< 	-lt
> 	-gt
<= 	-le
>= 	-ge
== 	-eq
!=	-ne 

# Logical operators

AND 	&&
OR		||
NOT 	!

# String Null values

IS Null 		-z
IS NOT Null 	-n

a=""
b="cat"
[[ -z $a && -n $b ]]
echo $?


# Strings

a="hello"
b="world"
c=$a$b
echo $c 		# helloworld
echo ${#a}		# 5 - lenght of a	
echo ${#c}		# 10 - lenght of c
d=${c:3}
echo d 			# loworld - print start with 3rd char (substring)
echo ${c:3:4}	# lowo - print 4 chars after 3rd
echo ${c:-4}	# print last 4 chars
echo ${c:-4:3}	# similar but limit to 3 chars

fruit="apple banana banana cherry"
echo ${fruit/banana/durian}		# replace first instance of banana with durian 
echo ${fruit//banana/durian}	# replace all instances of banana with durian 
echo ${fruit/#apple/durian}		# will replace apple with durian only in beginning of the string
echo ${fruit/#cherry/durian}	# will replace cherry with durian only in the end of the string
echo ${fruit/c*/durian}			# will replace all instances start with "c" with durian 

# Colours

echo -e '\033[34;42mColor Text\033[0m' 		# -e enable escape sequences, m - end of escape sequence, 34;42 - forgraund;background colors


# data manipulation 

#get line number 
awk '/line_to _look/{ print NR; exit }' file_name

# print 2nd line
sed -n '2p' < file.txt

# split on line number - will output files with 5 lines or less
split -l 5 file_name